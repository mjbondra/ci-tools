.base-default: &base-default
  image: docker:latest
  services:
    - docker:dind

stages:
  - lint
  - build
  - post-build
  - deploy

before_script:
  - docker build -t "${TEST_TAG}" .

lint:
  <<: *base-default
  rules:
    - if: $CI_COMMIT_TAG == null
  script: docker run
    -v "${CI_PROJECT_DIR}:${CI_PROJECT_DIR}"
    -w "${CI_PROJECT_DIR}"
    "${TEST_TAG}"
    /bin/bash -c "ci-shell-lint"
  stage: lint

build:
  <<: *base-default
  rules:
    - if: $CI_COMMIT_TAG == null
  artifacts:
    paths:
      - bin/
      - lib/
      - public/
      - README.md
  script: docker run
    -v "${CI_PROJECT_DIR}:${CI_PROJECT_DIR}"
    -w "${CI_PROJECT_DIR}"
    "${TEST_TAG}"
    /bin/bash -c "./build.sh"
  stage: build

pages:
  <<: *base-default
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  artifacts:
    paths:
      - public/
  script: ":"
  stage: post-build

release:
  <<: *base-default
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  script: docker run
    -e CI_COMMIT_REF_NAME
    -e CI_PROJECT_PATH
    -e GIT_USER_EMAIL
    -e GIT_USER_NAME
    -e SSH_PRIVATE_KEY
    -v "${CI_PROJECT_DIR}:${CI_PROJECT_DIR}"
    -w "${CI_PROJECT_DIR}"
    "${TEST_TAG}"
    /bin/bash -c "ci-git-config && ci-git-release -t shell -a bin -a lib -a public -a README.md"
  stage: deploy

publish:
  <<: *base-default
  rules:
    - if: $CI_COMMIT_TAG != null
  script: docker run
    -e CI_COMMIT_TAG
    -e CI_PROJECT_NAME
    -e DOCKER_ORGANIZATION
    -e DOCKER_PASSWORD
    -e DOCKER_USERNAME
    -v "/var/run/docker.sock:/var/run/docker.sock"
    -v "${CI_PROJECT_DIR}:${CI_PROJECT_DIR}"
    -w "${CI_PROJECT_DIR}"
    "${TEST_TAG}"
    /bin/bash -c "ci-docker-build && ci-docker-config && ci-docker-release"
  stage: deploy

variables:
  TEST_TAG: test:latest
